# EduLink Pro - Complete Backend Technical Specifications

## üìÇ Page Inventory & Routes Analysis

### Authentication (4 pages)
- `/login` - User authentication
- `/register` - Registration hub
- `/register/lecturer` - Lecturer registration
- `/register/student` - Student registration

### Lecturer Routes (22 pages)
**Dashboard & Analytics (4)**
- `/lecturer/dashboard`
- `/lecturer/analytics`
- `/lecturer/analytics/engagement`
- `/lecturer/analytics/queries`
- `/lecturer/analytics/response-times`

**Communication (4)**
- `/lecturer/messages`
- `/lecturer/conversations`
- `/lecturer/conversations/[id]`
- `/lecturer/queries`

**Management (4)**
- `/lecturer/courses`
- `/lecturer/students`
- `/lecturer/resources`
- `/lecturer/announcements`

**Scheduling (2)**
- `/lecturer/appointments`
- `/lecturer/availability`

**Profile (2)**
- `/lecturer/profile`
- `/lecturer/settings`

### Student Routes (16 pages)
**Dashboard (3)**
- `/student/dashboard`
- `/student/courses`
- `/student/lecturers`

**Communication (5)**
- `/student/messages`
- `/student/conversations`
- `/student/conversations/[id]`
- `/student/queries` ‚≠ê
- `/student/queries/[id]` ‚≠ê

**Services (3)**
- `/student/appointments`
- `/student/resources` ‚≠ê
- `/student/announcements`

**Profile (2)**
- `/student/profile`
- `/student/settings` ‚≠ê

### Shared Routes (10 pages)
- `/courses`, `/courses/[id]`, `/courses/[id]/messages`, `/courses/[id]/resources`, `/courses/[id]/students`
- `/messages/*` (new, search, archive, drafts, sent)
- `/notifications`
- `/edubot`

---

## üìä Enhanced Data Models

### User (Enhanced)
```typescript
interface User {
  _id: string;
  email: string;
  password: string; // bcrypt hashed
  role: 'lecturer' | 'student';
  profile: {
    firstName: string;
    lastName: string;
    avatar?: string;
    department?: string;
    studentId?: string;
    employeeId?: string;
    phone?: string;
    office?: string; // For lecturers
    officeHours?: string[]; // For lecturers - ["Monday 2:00-4:00 PM"]
    year?: string; // For students - "Sophomore", "Junior", etc.
    major?: string; // For students
    gpa?: number; // For students
    guardianContact?: string; // For students
    specialNeeds?: string[]; // Accommodation requirements
  };
  isActive: boolean;
  lastLogin?: Date;
  preferences: UserPreferences;
  privacy: PrivacySettings;
  security: SecuritySettings;
  notifications: NotificationSettings;
  createdAt: Date;
  updatedAt: Date;
}

interface UserPreferences {
  language: string;
  timezone: string;
  dateFormat: string;
  timeFormat: '12h' | '24h';
  theme: 'light' | 'dark' | 'auto';
  dashboardLayout: 'grid' | 'list';
  autoSaveInterval: number;
  defaultQueryCategory: string;
}

interface PrivacySettings {
  profileVisibility: 'public' | 'university' | 'private';
  showOnlineStatus: boolean;
  allowDirectMessages: boolean;
  shareAcademicInfo: boolean;
  showContactInfo: boolean;
  allowCalendarSharing: boolean;
}

interface SecuritySettings {
  twoFactorEnabled: boolean;
  sessionTimeout: number;
  loginNotifications: boolean;
  deviceManagement: boolean;
  trustedDevices: TrustedDevice[];
}

interface TrustedDevice {
  deviceId: string;
  deviceName: string;
  lastUsed: Date;
  ipAddress: string;
  userAgent: string;
}

interface NotificationSettings {
  email: {
    announcements: boolean;
    queryResponses: boolean;
    appointmentReminders: boolean;
    appointmentChanges: boolean;
    newMessages: boolean;
    resourceUpdates: boolean;
    systemUpdates: boolean;
  };
  browser: {
    announcements: boolean;
    queryResponses: boolean;
    appointmentReminders: boolean;
    newMessages: boolean;
  };
  mobile: {
    announcements: boolean;
    queryResponses: boolean;
    appointmentReminders: boolean;
    newMessages: boolean;
  };
}
```

### Course (Enhanced)
```typescript
interface Course {
  _id: string;
  code: string; // CS101
  name: string;
  description: string;
  department: string;
  credits: number;
  semester: string;
  lecturerId: string;
  schedule: {
    days: string[];
    time: string;
    location: string;
  };
  enrollment: {
    students: string[]; // User IDs
    capacity: number;
    current: number;
    waitlist: string[]; // User IDs on waitlist
  };
  status: 'active' | 'upcoming' | 'completed' | 'archived';
  
  // Enhanced course metadata
  prerequisites: string[]; // Course codes
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  tags: string[];
  syllabus?: string; // File URL
  
  // Rating and review system
  rating: number; // Average rating 0-5
  reviews: CourseReview[];
  reviewCount: number;
  
  // Academic tracking
  assignments: CourseAssignment[];
  upcomingEvents: CourseEvent[];
  
  // Resources and activity
  resourceCount: number;
  announcementCount: number;
  lastActivity: Date;
  
  createdAt: Date;
  updatedAt: Date;
}

interface CourseReview {
  _id: string;
  studentId: string;
  rating: number; // 1-5
  comment?: string;
  semester: string;
  isVerified: boolean;
  createdAt: Date;
}

interface CourseAssignment {
  _id: string;
  title: string;
  description: string;
  dueDate: Date;
  status: 'upcoming' | 'active' | 'submitted' | 'graded';
  maxPoints: number;
  category: 'assignment' | 'quiz' | 'exam' | 'project';
  associatedResources: string[]; // Resource IDs
  submissionFormat: string[];
  createdAt: Date;
}

interface CourseEvent {
  _id: string;
  type: 'lecture' | 'assignment' | 'exam' | 'lab' | 'office-hours';
  title: string;
  date: Date;
  time?: string;
  location?: string;
  description?: string;
  isRequired: boolean;
  createdAt: Date;
}
```

### Query (Enhanced)
```typescript
interface Query {
  _id: string;
  studentId: string;
  lecturerId: string;
  title: string;
  description: string;
  category: 'Academic' | 'Technical' | 'Administrative' | 'Appointment' | 'Course-related';
  priority: 'low' | 'medium' | 'high';
  status: 'pending' | 'in-progress' | 'resolved' | 'closed';
  course?: string;
  submittedAt: Date;
  lastUpdated: Date;
  
  // Enhanced messaging system
  messages: QueryMessage[];
  
  // Status tracking
  statusHistory: StatusHistoryEntry[];
  
  // Read status
  readByLecturer: boolean;
  readByStudent: boolean;
  
  // Attachments
  attachments: Attachment[];
  
  // Auto-close after resolution
  autoCloseAt?: Date;
  
  createdAt: Date;
  updatedAt: Date;
}

interface QueryMessage {
  _id: string;
  sender: string; // User ID
  senderType: 'student' | 'lecturer';
  content: string;
  timestamp: Date;
  attachments?: Attachment[];
  isRead: boolean;
  readAt?: Date;
}

interface StatusHistoryEntry {
  status: 'pending' | 'in-progress' | 'resolved' | 'closed';
  timestamp: Date;
  changedBy: string; // User ID
  changedByName: string;
  note?: string;
  reason?: string;
}
```

### Conversation (Enhanced for Real-time)
```typescript
interface Conversation {
  _id: string;
  participants: {
    student: string;
    lecturer: string;
  };
  subject: string;
  course?: string;
  status: 'active' | 'resolved' | 'archived';
  priority: 'low' | 'medium' | 'high';
  messages: ConversationMessage[];
  unreadCount: {
    student: number;
    lecturer: number;
  };
  lastMessage: string;
  lastMessageAt: Date;
  
  // Typing indicators
  typingUsers: string[];
  
  // Message threading
  isThreaded: boolean;
  parentConversation?: string;
  
  createdAt: Date;
  updatedAt: Date;
}

interface ConversationMessage {
  _id: string;
  sender: string;
  content: string;
  timestamp: Date;
  attachments?: Attachment[];
  isRead: boolean;
  readAt?: Date;
  editedAt?: Date;
  replyTo?: string; // Message ID for threading
}
```

### Resource (Enhanced)
```typescript
interface Resource {
  _id: string;
  title: string;
  description?: string;
  filename: string;
  originalFilename: string;
  fileSize: number;
  fileType: string;
  mimeType: string;
  course: string;
  lecturerId: string;
  category: 'lecture' | 'assignment' | 'reading' | 'lab' | 'exam' | 'reference' | 'supplemental';
  
  // Enhanced metadata
  tags: string[];
  version: string;
  versionHistory: ResourceVersion[];
  weekNumber?: number; // Course week association
  dueDate?: Date; // For assignments
  associatedAssignment?: string; // Assignment ID
  
  // Access control and permissions
  isPublic: boolean;
  isRequired: boolean;
  accessLevel: 'all' | 'enrolled' | 'specific';
  allowedUsers?: string[];
  permissions: {
    canDownload: boolean;
    canView: boolean;
    requiresAuth: boolean;
    canPreview: boolean;
  };
  
  // File management
  url: string;
  downloadCount: number;
  downloadHistory: DownloadRecord[];
  
  // Content analysis
  extractedText?: string;
  thumbnail?: string;
  previewUrl?: string;
  previewAvailable: boolean;
  
  // Uploader information
  uploader: {
    name: string;
    role: 'lecturer' | 'ta' | 'admin';
    userId: string;
  };
  
  // Lifecycle
  publishedAt?: Date;
  expiresAt?: Date;
  isArchived: boolean;
  
  uploadedAt: Date;
  lastModified: Date;
  createdAt: Date;
  updatedAt: Date;
}

interface ResourceVersion {
  version: string;
  filename: string;
  fileSize: number;
  uploadedAt: Date;
  uploadedBy: string;
  changelog?: string;
  url: string;
}

interface DownloadRecord {
  userId: string;
  userType: 'student' | 'lecturer';
  downloadedAt: Date;
  ipAddress: string;
  userAgent?: string;
}
```

### Appointment
```typescript
interface Appointment {
  _id: string;
  studentId: string;
  lecturerId: string;
  subject: string;
  description: string;
  date: Date;
  time: string;
  duration: number; // minutes
  location: string;
  type: 'office-hours' | 'consultation' | 'project-discussion' | 'exam-review';
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed' | 'no-show';
  course?: string;
  notes?: string;
  
  // Meeting links
  meetingUrl?: string;
  meetingPlatform?: 'zoom' | 'teams' | 'meet' | 'in-person';
  
  // Reminders
  remindersSent: Date[];
  
  // Reschedule history
  rescheduleHistory: RescheduleRecord[];
  
  createdAt: Date;
  updatedAt: Date;
}

interface RescheduleRecord {
  originalDate: Date;
  originalTime: string;
  newDate: Date;
  newTime: string;
  reason: string;
  rescheduledBy: string;
  rescheduledAt: Date;
}
```

### Announcement
```typescript
interface Announcement {
  _id: string;
  authorId: string;
  title: string;
  content: string;
  type: 'general' | 'urgent' | 'course' | 'schedule' | 'system';
  priority: 'low' | 'medium' | 'high';
  targeting: {
    audience: 'all' | 'course-specific' | 'year-specific' | 'department-specific';
    courses?: string[];
    yearLevels?: string[];
    departments?: string[];
  };
  attachments?: Attachment[];
  
  // Publishing
  publishedAt?: Date;
  expiresAt?: Date;
  isPinned: boolean;
  isArchived: boolean;
  
  // Engagement tracking
  readBy: ReadRecord[];
  reactions: AnnouncementReaction[];
  
  // Comments system
  allowComments: boolean;
  comments: AnnouncementComment[];
  
  createdAt: Date;
  updatedAt: Date;
}

interface ReadRecord {
  userId: string;
  readAt: Date;
  timeSpent?: number; // seconds
}

interface AnnouncementReaction {
  userId: string;
  type: 'like' | 'important' | 'question';
  reactedAt: Date;
}

interface AnnouncementComment {
  _id: string;
  userId: string;
  content: string;
  commentedAt: Date;
  isEdited: boolean;
  editedAt?: Date;
  replyTo?: string;
}
```

### Student Enrollment & Performance
```typescript
interface StudentEnrollment {
  _id: string;
  studentId: string;
  courseId: string;
  enrollmentDate: Date;
  status: 'active' | 'inactive' | 'withdrawn' | 'completed';
  
  // Academic performance
  currentGrade: string; // A+, A, A-, B+, etc.
  gradePoints: number;
  attendance: number; // Percentage
  participationScore: number; // Percentage
  
  // Assignment tracking
  assignments: {
    submitted: number;
    total: number;
    averageScore: number;
    grades: AssignmentGrade[];
  };
  
  // Behavioral tracking
  lastActivity: Date;
  contactPreference: 'email' | 'message' | 'appointment';
  
  // Notes and accommodations
  lecturerNotes?: string;
  specialNeeds?: string[];
  guardianContact?: string;
  
  // Analytics
  engagementScore: number;
  riskLevel: 'low' | 'medium' | 'high';
  improvementTrend: 'improving' | 'stable' | 'declining';
  
  createdAt: Date;
  updatedAt: Date;
}

interface AssignmentGrade {
  assignmentId: string;
  submittedAt?: Date;
  grade?: number;
  feedback?: string;
  status: 'not-submitted' | 'submitted' | 'graded' | 'late';
}

interface AttendanceRecord {
  _id: string;
  studentId: string;
  courseId: string;
  date: Date;
  status: 'present' | 'absent' | 'late' | 'excused';
  notes?: string;
  recordedBy: string; // Lecturer ID
  createdAt: Date;
}
```

### Course Message (Enhanced)
```typescript
interface CourseMessage {
  _id: string;
  courseId: string;
  sender: {
    id: string;
    name: string;
    role: 'student' | 'lecturer' | 'ta';
    avatar: string;
  };
  recipient: {
    id: string;
    name: string;
    role: 'student' | 'lecturer' | 'class';
    avatar: string;
  };
  subject: string;
  content: string;
  timestamp: Date;
  
  // Message classification
  priority: 'normal' | 'high' | 'urgent';
  category: 'general' | 'assignment' | 'exam' | 'lab' | 'project' | 'attendance';
  
  // Status tracking
  isRead: boolean;
  readAt?: Date;
  
  // Attachments and replies
  attachments?: Attachment[];
  replies?: CourseMessage[];
  parentMessageId?: string;
  
  // Broadcast handling
  isBroadcast: boolean;
  broadcastTo?: string[]; // User IDs or 'all'
  readBy?: string[]; // User IDs who have read it
  
  createdAt: Date;
  updatedAt: Date;
}
```

### Enhanced Attachment Model
```typescript
interface Attachment {
  _id: string;
  name: string;
  originalName: string;
  url: string;
  type: string;
  mimeType: string;
  size: number;
  uploadedBy: string;
  uploadedAt: Date;
  
  // Security
  isScanned: boolean;
  scanResult?: 'clean' | 'infected' | 'suspicious';
  scanDate?: Date;
  
  // Processing
  isProcessed: boolean;
  processingStatus: 'pending' | 'processing' | 'completed' | 'failed';
  thumbnail?: string;
  previewUrl?: string;
  
  // Access tracking
  accessHistory: FileAccessRecord[];
}

interface FileAccessRecord {
  userId: string;
  accessType: 'view' | 'download' | 'preview';
  accessedAt: Date;
  ipAddress: string;
}
```

### User Activity Log
```typescript
interface ActivityLog {
  _id: string;
  userId: string;
  action: string;
  resource: string;
  resourceId: string;
  details: Record<string, any>;
  ipAddress: string;
  userAgent: string;
  timestamp: Date;
  sessionId: string;
}
```

### System Settings
```typescript
interface SystemSettings {
  _id: string;
  key: string;
  value: any;
  type: 'string' | 'number' | 'boolean' | 'object' | 'array';
  description: string;
  category: string;
  isEditable: boolean;
  updatedBy: string;
  updatedAt: Date;
}
```

---

## üöÄ Enhanced API Endpoints

### Authentication
```
POST   /api/auth/login
POST   /api/auth/register
POST   /api/auth/refresh
POST   /api/auth/logout
POST   /api/auth/forgot-password
POST   /api/auth/reset-password
POST   /api/auth/verify-email
POST   /api/auth/resend-verification
```

### User Management & Settings
```
GET    /api/profile
PUT    /api/profile
POST   /api/profile/avatar
DELETE /api/profile/avatar

# Settings Management
GET    /api/settings
PUT    /api/settings
GET    /api/settings/notifications
PUT    /api/settings/notifications
GET    /api/settings/privacy
PUT    /api/settings/privacy
GET    /api/settings/security
PUT    /api/settings/security
GET    /api/settings/preferences
PUT    /api/settings/preferences

# Account Management
POST   /api/account/export-data
POST   /api/account/deactivate
POST   /api/account/delete
POST   /api/account/change-password
POST   /api/account/enable-2fa
POST   /api/account/disable-2fa
GET    /api/account/trusted-devices
DELETE /api/account/trusted-devices/{deviceId}
```

### Enhanced Query Management
```
GET    /api/queries # with filters: course, status, priority, category, search, dateRange
POST   /api/queries
GET    /api/queries/{id}
PUT    /api/queries/{id}
DELETE /api/queries/{id}

# Query status management
PUT    /api/queries/{id}/status
PUT    /api/queries/{id}/priority
PUT    /api/queries/{id}/assign
PUT    /api/queries/{id}/close

# Query messaging
POST   /api/queries/{id}/messages
GET    /api/queries/{id}/messages
PUT    /api/queries/{id}/messages/{messageId}
DELETE /api/queries/{id}/messages/{messageId}

# Read status
PUT    /api/queries/{id}/mark-read
PUT    /api/queries/mark-all-read

# Bulk operations
PUT    /api/queries/bulk-status
PUT    /api/queries/bulk-assign
DELETE /api/queries/bulk-delete

# Query analytics
GET    /api/queries/stats
GET    /api/queries/response-times
GET    /api/queries/categories-summary
```

### Enhanced Resource Management
```
GET    /api/resources # with filters: course, category, fileType, isPublic, tags, dateRange, weekNumber, isRequired
POST   /api/resources # multipart/form-data
GET    /api/resources/{id}
PUT    /api/resources/{id}
DELETE /api/resources/{id}

# Resource access and permissions
GET    /api/resources/{id}/download
GET    /api/resources/{id}/preview
GET    /api/resources/{id}/thumbnail
HEAD   /api/resources/{id} # Check access permissions
POST   /api/resources/{id}/check-permission

# Resource versions and history
GET    /api/resources/{id}/versions
POST   /api/resources/{id}/versions
GET    /api/resources/{id}/versions/{version}
DELETE /api/resources/{id}/versions/{version}
POST   /api/resources/{id}/revert/{version}

# Resource metadata and organization
PUT    /api/resources/{id}/tags
PUT    /api/resources/{id}/category
PUT    /api/resources/{id}/week/{weekNumber}
PUT    /api/resources/{id}/permissions
POST   /api/resources/{id}/associate-assignment/{assignmentId}

# Resource analytics and tracking
GET    /api/resources/{id}/stats
GET    /api/resources/{id}/download-history
POST   /api/resources/{id}/track-access
GET    /api/resources/analytics/{courseId} # Course resource analytics

# Bulk operations
POST   /api/resources/bulk-upload
PUT    /api/resources/bulk-update
DELETE /api/resources/bulk-delete
POST   /api/resources/bulk-organize # Bulk category/week assignment

# Resource search and discovery
GET    /api/resources/search # Advanced search with multiple criteria
GET    /api/resources/tags/{courseId} # Get all tags for course
GET    /api/resources/recent/{courseId}
GET    /api/resources/popular/{courseId}
GET    /api/resources/required/{courseId}
GET    /api/resources/by-week/{courseId}/{weekNumber}

# Resource management (Lecturer only)
POST   /api/resources/{id}/publish
POST   /api/resources/{id}/unpublish
POST   /api/resources/{id}/archive
POST   /api/resources/{id}/duplicate
GET    /api/resources/usage-analytics/{courseId}
```

### Messages/Conversations (Enhanced Real-time)
```
GET    /api/conversations # with filters: course, status, priority, search, unreadOnly
POST   /api/conversations
GET    /api/conversations/{id}
PUT    /api/conversations/{id}
DELETE /api/conversations/{id}

# Real-time messaging
POST   /api/conversations/{id}/messages
GET    /api/conversations/{id}/messages
PUT    /api/conversations/{id}/messages/{messageId}
DELETE /api/conversations/{id}/messages/{messageId}

# Message status
PUT    /api/conversations/{id}/messages/{messageId}/read
PUT    /api/conversations/{id}/mark-all-read

# Typing indicators
POST   /api/conversations/{id}/typing
DELETE /api/conversations/{id}/typing

# Message threading
POST   /api/conversations/{id}/messages/{messageId}/reply
GET    /api/conversations/{id}/messages/{messageId}/thread

# Conversation management
PUT    /api/conversations/{id}/archive
PUT    /api/conversations/{id}/unarchive
PUT    /api/conversations/{id}/priority
```

### Dashboard & Analytics
```
GET    /api/dashboard/lecturer/stats
GET    /api/dashboard/lecturer/recent-activity
GET    /api/dashboard/lecturer/pending-queries
GET    /api/dashboard/lecturer/upcoming-appointments
GET    /api/dashboard/lecturer/quick-stats

GET    /api/dashboard/student/stats
GET    /api/dashboard/student/recent-activity
GET    /api/dashboard/student/upcoming-deadlines
GET    /api/dashboard/student/new-resources
GET    /api/dashboard/student/quick-stats

# Advanced analytics
GET    /api/analytics/overview
GET    /api/analytics/engagement
GET    /api/analytics/response-times
GET    /api/analytics/queries
GET    /api/analytics/resources
GET    /api/analytics/user-activity
GET    /api/analytics/system-health
```

### Appointments (Enhanced)
```
GET    /api/appointments # with filters: status, date, course, lecturer, student, type
POST   /api/appointments
GET    /api/appointments/{id}
PUT    /api/appointments/{id}
DELETE /api/appointments/{id}

# Appointment management
PUT    /api/appointments/{id}/confirm
PUT    /api/appointments/{id}/cancel
PUT    /api/appointments/{id}/reschedule
PUT    /api/appointments/{id}/complete
PUT    /api/appointments/{id}/no-show

# Meeting integration
POST   /api/appointments/{id}/meeting-link
PUT    /api/appointments/{id}/meeting-link
DELETE /api/appointments/{id}/meeting-link

# Reminders
POST   /api/appointments/{id}/send-reminder
GET    /api/appointments/{id}/reminders

# Availability management (Lecturer only)
GET    /api/availability/{lecturerId}
POST   /api/availability
PUT    /api/availability/{id}
DELETE /api/availability/{id}
GET    /api/availability/{lecturerId}/slots
```

### Enhanced Course Management
```
GET    /api/courses # with filters: department, semester, difficulty, status, rating, search, prerequisites
POST   /api/courses # Admin/Lecturer only
GET    /api/courses/{id}
PUT    /api/courses/{id} # Lecturer only
DELETE /api/courses/{id} # Admin only

# Course enrollment & waitlist
POST   /api/courses/{id}/enroll
POST   /api/courses/{id}/waitlist
DELETE /api/courses/{id}/withdraw
GET    /api/courses/{id}/students # Lecturer only
POST   /api/courses/{id}/students/{studentId} # Lecturer enrollment
DELETE /api/courses/{id}/students/{studentId} # Remove student
GET    /api/courses/{id}/waitlist # Lecturer only
POST   /api/courses/{id}/waitlist/{studentId}/approve # Move from waitlist to enrolled

# Course content and events  
GET    /api/courses/{id}/events
POST   /api/courses/{id}/events # Lecturer only
PUT    /api/courses/{id}/events/{eventId}
DELETE /api/courses/{id}/events/{eventId}

GET    /api/courses/{id}/assignments
POST   /api/courses/{id}/assignments # Lecturer only
PUT    /api/courses/{id}/assignments/{assignmentId}
DELETE /api/courses/{id}/assignments/{assignmentId}

# Course reviews and rating
GET    /api/courses/{id}/reviews
POST   /api/courses/{id}/reviews # Students only
PUT    /api/courses/{id}/reviews/{reviewId} # Own review only
DELETE /api/courses/{id}/reviews/{reviewId} # Own review only

# Course statistics
GET    /api/courses/{id}/stats # Lecturer only
GET    /api/courses/{id}/analytics # Lecturer only
GET    /api/courses/{id}/performance # Lecturer only
```

### Student Management & Performance Tracking
```
# Student enrollment and performance
GET    /api/students/enrollment/{courseId} # Lecturer only - get all students in course
GET    /api/students/{studentId}/enrollment/{courseId} # Get specific student's course performance
PUT    /api/students/{studentId}/enrollment/{courseId} # Update student performance data
DELETE /api/students/{studentId}/enrollment/{courseId} # Remove from course

# Student grades and assignments
GET    /api/students/{studentId}/grades/{courseId}
PUT    /api/students/{studentId}/grades/{courseId}/{assignmentId}
GET    /api/students/{studentId}/assignments/{courseId}
POST   /api/students/{studentId}/assignments/{courseId}/{assignmentId}/submit

# Attendance tracking
GET    /api/students/{studentId}/attendance/{courseId}
POST   /api/students/{studentId}/attendance/{courseId} # Record attendance
PUT    /api/students/{studentId}/attendance/{courseId}/{recordId}
GET    /api/courses/{courseId}/attendance # Lecturer only - class attendance overview

# Student notes and accommodations (Lecturer only)
GET    /api/students/{studentId}/notes/{courseId}
PUT    /api/students/{studentId}/notes/{courseId}
GET    /api/students/{studentId}/accommodations
PUT    /api/students/{studentId}/accommodations

# Student analytics and performance (Lecturer only)
GET    /api/students/{studentId}/analytics/{courseId}
GET    /api/students/at-risk/{courseId} # Get students needing attention
GET    /api/students/performance-summary/{courseId}

# Bulk operations (Lecturer only)
POST   /api/students/bulk-grade/{courseId}
POST   /api/students/bulk-message/{courseId}
GET    /api/students/export/{courseId} # Export roster CSV
```

### Course Messages (Enhanced)
```
GET    /api/courses/{courseId}/messages # with filters: priority, category, sender, unread
POST   /api/courses/{courseId}/messages
GET    /api/courses/{courseId}/messages/{messageId}
PUT    /api/courses/{courseId}/messages/{messageId}
DELETE /api/courses/{courseId}/messages/{messageId}

# Message status and replies
PUT    /api/courses/{courseId}/messages/{messageId}/read
POST   /api/courses/{courseId}/messages/{messageId}/reply
GET    /api/courses/{courseId}/messages/{messageId}/thread

# Broadcast messages (Lecturer only)
POST   /api/courses/{courseId}/messages/broadcast
GET    /api/courses/{courseId}/messages/broadcast-status/{messageId}

# Message analytics (Lecturer only)
GET    /api/courses/{courseId}/messages/stats
GET    /api/courses/{courseId}/messages/read-status
```

### Enhanced File Upload & Management
```
POST   /api/upload # multipart/form-data with chunking support
POST   /api/upload/chunk # For large file uploads
POST   /api/upload/finalize/{uploadId}
DELETE /api/upload/cancel/{uploadId}

# File management
GET    /api/files/{fileId}
DELETE /api/files/{fileId}
GET    /api/files/{fileId}/info
POST   /api/files/{fileId}/scan # Virus scan
GET    /api/files/{fileId}/thumbnail
GET    /api/files/{fileId}/preview

# Bulk file operations
POST   /api/files/bulk-upload
POST   /api/files/bulk-scan
DELETE /api/files/bulk-delete
```

### Notifications (Enhanced)
```
GET    /api/notifications
POST   /api/notifications
GET    /api/notifications/{id}
PUT    /api/notifications/{id}/read
PUT    /api/notifications/mark-all-read
DELETE /api/notifications/{id}

# Notification preferences
GET    /api/notifications/preferences
PUT    /api/notifications/preferences

# Push notifications
POST   /api/notifications/subscribe
DELETE /api/notifications/unsubscribe
POST   /api/notifications/test
```

### Announcements (Enhanced)
```
GET    /api/announcements # with filters: type, priority, course, status, dateRange
POST   /api/announcements # Lecturer/Admin only
GET    /api/announcements/{id}
PUT    /api/announcements/{id} # Author only
DELETE /api/announcements/{id} # Author only

# Announcement interactions
PUT    /api/announcements/{id}/read
POST   /api/announcements/{id}/react
DELETE /api/announcements/{id}/react
POST   /api/announcements/{id}/comments
PUT    /api/announcements/{id}/comments/{commentId}
DELETE /api/announcements/{id}/comments/{commentId}

# Announcement management
PUT    /api/announcements/{id}/pin
PUT    /api/announcements/{id}/unpin
PUT    /api/announcements/{id}/archive
PUT    /api/announcements/{id}/publish
```

### Advanced Search & Analytics
```
# Global search across all entities
GET    /api/search # Multi-entity search (courses, resources, messages, users)
GET    /api/search/courses
GET    /api/search/resources  
GET    /api/search/messages
GET    /api/search/students # Lecturer only
GET    /api/search/lecturers

# Advanced filtering and sorting
GET    /api/courses/filter # Complex filtering with multiple criteria
GET    /api/resources/filter/{courseId}
GET    /api/students/filter/{courseId}
GET    /api/messages/filter/{courseId}

# Auto-suggestions and recommendations
GET    /api/search/suggestions # Search term suggestions
GET    /api/courses/recommended # Personalized course recommendations
GET    /api/resources/recommended/{courseId}

# Course directory and discovery
GET    /api/courses/directory # Public course directory with all filters
GET    /api/courses/by-department/{department}
GET    /api/courses/by-lecturer/{lecturerId}
GET    /api/courses/by-difficulty/{level}
GET    /api/courses/trending # Popular/highly-rated courses
GET    /api/courses/prerequisite-check/{courseId} # Check if student meets prerequisites
```

### User Directory
```
GET    /api/users/lecturers # Public directory
GET    /api/users/lecturers/{id} # Public profile
GET    /api/users/students # Lecturer only - enrolled students
GET    /api/users/students/{id} # Lecturer only

# User search and discovery
GET    /api/users/search
GET    /api/users/online # Show online users
```

### System Administration
```
GET    /api/admin/stats
GET    /api/admin/users
GET    /api/admin/activity-logs
GET    /api/admin/system-health
GET    /api/admin/settings
PUT    /api/admin/settings/{key}

# User management
POST   /api/admin/users
PUT    /api/admin/users/{id}
DELETE /api/admin/users/{id}
PUT    /api/admin/users/{id}/activate
PUT    /api/admin/users/{id}/deactivate
```

---

## üîê Enhanced Authentication & Authorization

### JWT Token Structure
```typescript
interface TokenPayload {
  userId: string;
  email: string;
  role: 'student' | 'lecturer' | 'admin';
  sessionId: string;
  deviceId: string;
  permissions: string[];
  iat: number;
  exp: number;
  jti: string; // JWT ID for token blacklisting
}
```

### Enhanced Role-Based Permissions
```typescript
const PERMISSIONS = {
  student: [
    // Query management
    'query:create', 'query:read:own', 'query:update:own', 'query:delete:own',
    'query:message:create', 'query:message:read:own',
    
    // Conversation management
    'conversation:create', 'conversation:read:participant', 'conversation:update:participant',
    'message:create', 'message:read:participant', 'message:update:own',
    
    // Appointment management
    'appointment:create', 'appointment:read:own', 'appointment:update:own', 
    'appointment:cancel:own', 'appointment:reschedule:own',
    
    // Resource access
    'resource:read:public', 'resource:read:enrolled', 'resource:download:allowed',
    'resource:preview', 'resource:track-access',
    
    // Course access
    'course:read:enrolled', 'course:view:materials',
    
    // Profile management
    'profile:read:own', 'profile:update:own', 'settings:manage:own',
    'notifications:manage:own', 'privacy:manage:own',
    
    // File operations
    'file:upload:own', 'file:delete:own',
  ],

  lecturer: [
    // All student permissions plus:
    
    // Query management
    'query:read:assigned', 'query:update:assigned', 'query:respond', 'query:close',
    'query:assign', 'query:priority:change', 'query:bulk-operations',
    
    // Conversation management
    'conversation:read:participant', 'conversation:create', 'conversation:manage',
    'message:read:participant', 'message:create', 'message:edit:own',
    
    // Appointment management
    'appointment:read:own', 'appointment:update:own', 'appointment:manage',
    'appointment:confirm', 'appointment:reschedule', 'appointment:cancel',
    'availability:manage:own',
    
    // Resource management
    'resource:create', 'resource:read:course', 'resource:update:own', 'resource:delete:own',
    'resource:publish', 'resource:version:manage', 'resource:analytics:view',
    'resource:bulk-operations',
    
    // Course management
    'course:read:teaching', 'course:update:teaching', 'course:manage:students',
    'course:analytics:view', 'course:resources:manage',
    
    // Student management
    'student:read:enrolled', 'student:update:notes', 'student:view:progress',
    
    // Analytics access
    'analytics:read:own', 'analytics:queries', 'analytics:engagement',
    'analytics:response-times',
    
    // Announcement management
    'announcement:create', 'announcement:manage:own', 'announcement:publish',
    'announcement:comments:moderate',
    
    // Profile management
    'profile:read:own', 'profile:update:own', 'settings:manage:own',
  ],

  admin: [
    // All lecturer permissions plus:
    'user:create', 'user:read:all', 'user:update:all', 'user:delete',
    'user:activate', 'user:deactivate', 'user:impersonate',
    
    'course:create', 'course:update:all', 'course:delete', 'course:manage:enrollment',
    
    'system:settings:read', 'system:settings:update', 'system:health:monitor',
    'system:logs:read', 'system:backup', 'system:maintenance',
    
    'analytics:read:all', 'analytics:system', 'analytics:users',
    
    'announcement:create:system', 'announcement:manage:all',
    
    'resource:read:all', 'resource:manage:all', 'resource:moderate',
  ]
};
```

### Security Middleware
```typescript
interface SecurityConfig {
  rateLimiting: {
    general: { windowMs: 15 * 60 * 1000, max: 100 },
    auth: { windowMs: 15 * 60 * 1000, max: 5 },
    upload: { windowMs: 60 * 1000, max: 10 },
    download: { windowMs: 60 * 1000, max: 50 }
  };
  
  corsOptions: {
    origin: string[];
    credentials: boolean;
    optionsSuccessStatus: 200;
  };
  
  helmet: {
    contentSecurityPolicy: boolean;
    hsts: boolean;
    frameguard: boolean;
  };
  
  sessionSecurity: {
    maxConcurrentSessions: 3;
    sessionTimeout: 24 * 60 * 60 * 1000; // 24 hours
    absoluteTimeout: 7 * 24 * 60 * 60 * 1000; // 7 days
  };
}
```

---

## ‚ö° Enhanced Real-time Features (WebSocket)

### Connection Management
```typescript
interface WebSocketConfig {
  authentication: {
    type: 'jwt';
    tokenValidation: boolean;
    refreshOnExpiry: boolean;
  };
  
  presence: {
    trackOnlineStatus: boolean;
    heartbeatInterval: 30000;
    offlineTimeout: 60000;
  };
  
  channels: {
    autoSubscribe: string[];
    roleBasedChannels: boolean;
    maxChannelsPerUser: 50;
  };
  
  messageQueue: {
    persistOfflineMessages: boolean;
    maxQueueSize: 1000;
    ttl: 7 * 24 * 60 * 60 * 1000; // 7 days
  };
}
```

### Real-time Events
```typescript
// Query Events
'QUERY_CREATED' | 'QUERY_UPDATED' | 'QUERY_STATUS_CHANGED' | 'QUERY_ASSIGNED' |
'QUERY_MESSAGE_SENT' | 'QUERY_MESSAGE_READ' | 'QUERY_PRIORITY_CHANGED' |

// Conversation Events  
'MESSAGE_SENT' | 'MESSAGE_READ' | 'MESSAGE_EDITED' | 'MESSAGE_DELETED' |
'USER_TYPING' | 'USER_STOPPED_TYPING' | 'CONVERSATION_ARCHIVED' |

// Appointment Events
'APPOINTMENT_BOOKED' | 'APPOINTMENT_CONFIRMED' | 'APPOINTMENT_CANCELLED' |
'APPOINTMENT_RESCHEDULED' | 'APPOINTMENT_REMINDER' | 'APPOINTMENT_UPDATED' |

// Resource Events
'RESOURCE_UPLOADED' | 'RESOURCE_UPDATED' | 'RESOURCE_DELETED' |
'RESOURCE_PUBLISHED' | 'RESOURCE_ACCESS_GRANTED' |

// Announcement Events
'ANNOUNCEMENT_PUBLISHED' | 'ANNOUNCEMENT_UPDATED' | 'ANNOUNCEMENT_DELETED' |
'ANNOUNCEMENT_PINNED' | 'ANNOUNCEMENT_COMMENTED' |

// System Events
'USER_STATUS_CHANGED' | 'NOTIFICATION' | 'SYSTEM_MAINTENANCE' |
'SYSTEM_UPDATE' | 'BROADCAST_MESSAGE' |

// Presence Events
'USER_ONLINE' | 'USER_OFFLINE' | 'USER_AWAY' | 'USER_BUSY'
```

### Broadcasting Channels
```typescript
interface ChannelStructure {
  // Personal channels
  user: {
    pattern: 'user:{userId}';
    events: ['NOTIFICATION', 'DIRECT_MESSAGE', 'SYSTEM_ALERT'];
  };
  
  // Course channels
  course: {
    pattern: 'course:{courseId}';
    events: ['RESOURCE_UPLOADED', 'ANNOUNCEMENT_PUBLISHED', 'COURSE_UPDATED'];
  };
  
  // Query channels
  query: {
    pattern: 'query:{queryId}';
    events: ['QUERY_MESSAGE_SENT', 'QUERY_STATUS_CHANGED', 'QUERY_UPDATED'];
  };
  
  // Conversation channels
  conversation: {
    pattern: 'conversation:{conversationId}';
    events: ['MESSAGE_SENT', 'USER_TYPING', 'MESSAGE_READ'];
  };
  
  // Role-based channels
  role: {
    pattern: 'role:{role}';
    events: ['ROLE_ANNOUNCEMENT', 'SYSTEM_UPDATE', 'POLICY_CHANGE'];
  };
  
  // Department channels
  department: {
    pattern: 'department:{departmentId}';
    events: ['DEPARTMENT_ANNOUNCEMENT', 'SCHEDULE_CHANGE'];
  };
  
  // Global channels
  global: {
    pattern: 'global';
    events: ['SYSTEM_MAINTENANCE', 'EMERGENCY_ALERT', 'GLOBAL_ANNOUNCEMENT'];
  };
}
```

---

## üìÅ Enhanced File Handling

### Supported File Types & Validation (Enhanced)
```typescript
const FILE_CONFIG = {
  allowedTypes: {
    documents: {
      extensions: ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt', '.pages'],
      mimeTypes: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain', 'application/rtf'],
      maxSize: '100MB'
    },
    presentations: {
      extensions: ['.ppt', '.pptx', '.odp', '.key'],
      mimeTypes: ['application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'],
      maxSize: '200MB'
    },
    spreadsheets: {
      extensions: ['.xls', '.xlsx', '.csv', '.ods', '.numbers'],
      mimeTypes: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/csv'],
      maxSize: '50MB'
    },
    images: {
      extensions: ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.bmp', '.tiff'],
      mimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml', 'image/bmp', 'image/tiff'],
      maxSize: '25MB'
    },
    archives: {
      extensions: ['.zip', '.rar', '.7z', '.tar.gz', '.tar', '.bz2'],
      mimeTypes: ['application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed', 'application/gzip'],
      maxSize: '500MB'
    },
    audio: {
      extensions: ['.mp3', '.wav', '.m4a', '.ogg', '.aac', '.flac'],
      mimeTypes: ['audio/mpeg', 'audio/wav', 'audio/mp4', 'audio/ogg', 'audio/aac', 'audio/flac'],
      maxSize: '100MB'
    },
    video: {
      extensions: ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.wmv', '.flv'],
      mimeTypes: ['video/mp4', 'video/webm', 'video/quicktime', 'video/x-msvideo', 'video/x-matroska'],
      maxSize: '2GB'
    },
    code: {
      extensions: ['.java', '.py', '.js', '.html', '.css', '.cpp', '.c', '.php', '.rb', '.go', '.rs'],
      mimeTypes: ['text/plain', 'text/html', 'text/css', 'application/javascript'],
      maxSize: '10MB'
    }
  },
  
  sizeLimits: {
    individual: 2 * 1024 * 1024 * 1024, // 2GB per file
    session: 5 * 1024 * 1024 * 1024, // 5GB per session
    daily: 25 * 1024 * 1024 * 1024, // 25GB per day per user
    storage: {
      student: 10 * 1024 * 1024 * 1024, // 10GB total storage
      lecturer: 100 * 1024 * 1024 * 1024, // 100GB total storage
      course: 50 * 1024 * 1024 * 1024, // 50GB per course
    }
  },
  
  permissions: {
    lecturer: ['upload', 'delete', 'modify-permissions', 'bulk-operations'],
    ta: ['upload', 'modify-own'],
    student: ['view', 'download-permitted'],
    public: ['view-public']
  },
  
  processing: {
    thumbnailGeneration: true,
    previewGeneration: true,
    textExtraction: true,
    virusScanning: true,
    metadataExtraction: true,
    compressionOptimization: true,
    watermarking: false // Can be enabled per course
  },
  
  retention: {
    activeCourseDays: 0, // Keep forever while course is active
    completedCourseDays: 1095, // 3 years after course completion
    userDataDays: 2555, // 7 years for academic records
    logsDays: 365 // 1 year for access logs
  }
};
```

### Enhanced Storage Structure
```
/storage/
‚îú‚îÄ‚îÄ users/
‚îÇ   ‚îú‚îÄ‚îÄ profiles/{userId}/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ avatar.jpg
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ documents/
‚îÇ   ‚îî‚îÄ‚îÄ temp/{userId}/
‚îú‚îÄ‚îÄ courses/{courseId}/
‚îÇ   ‚îú‚îÄ‚îÄ resources/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ {resourceId}/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ original/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ versions/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ thumbnails/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ previews/
‚îÇ   ‚îî‚îÄ‚îÄ attachments/
‚îú‚îÄ‚îÄ conversations/{conversationId}/
‚îÇ   ‚îú‚îÄ‚îÄ attachments/
‚îÇ   ‚îî‚îÄ‚îÄ thumbnails/
‚îú‚îÄ‚îÄ queries/{queryId}/
‚îÇ   ‚îú‚îÄ‚îÄ attachments/
‚îÇ   ‚îî‚îÄ‚îÄ thumbnails/
‚îú‚îÄ‚îÄ announcements/{announcementId}/
‚îÇ   ‚îú‚îÄ‚îÄ attachments/
‚îÇ   ‚îî‚îÄ‚îÄ media/
‚îú‚îÄ‚îÄ system/
‚îÇ   ‚îú‚îÄ‚îÄ backups/
‚îÇ   ‚îú‚îÄ‚îÄ logs/
‚îÇ   ‚îî‚îÄ‚îÄ temp/
‚îî‚îÄ‚îÄ cdn/
    ‚îú‚îÄ‚îÄ thumbnails/
    ‚îú‚îÄ‚îÄ previews/
    ‚îî‚îÄ‚îÄ compressed/
```

### File Processing Pipeline
```typescript
interface FileProcessingPipeline {
  steps: [
    'upload_validation',
    'virus_scan',
    'metadata_extraction',
    'thumbnail_generation',
    'preview_generation',
    'text_extraction',
    'compression_optimization',
    'cdn_upload',
    'database_record',
    'cleanup_temp'
  ];
  
  processors: {
    thumbnailGenerator: {
      images: { width: 300, height: 300, quality: 85 };
      documents: { page: 1, width: 200, height: 260 };
      videos: { timestamp: '00:00:01', width: 320, height: 240 };
    };
    
    previewGenerator: {
      documents: { pages: 5, width: 800, height: 600 };
      images: { width: 1200, height: 800, quality: 90 };
      videos: { duration: 30, width: 720, height: 480 };
    };
    
    textExtractor: {
      pdf: { engine: 'tesseract', language: 'eng' };
      images: { ocr: true, language: 'eng' };
      documents: { preserveFormatting: true };
    };
  };
}
```

---

## üîÑ Enhanced API Response Format

### Standardized Response Structure
```typescript
interface APIResponse<T> {
  success: boolean;
  data?: T;
  message?: string;
  error?: APIError;
  meta?: ResponseMeta;
  pagination?: PaginationInfo;
  timestamp: string;
  requestId: string;
  version: string;
}

interface APIError {
  code: ErrorCode;
  message: string;
  details?: Record<string, any>;
  field?: string;
  stack?: string; // Only in development
  supportId?: string;
}

interface ResponseMeta {
  executionTime: number;
  source: 'cache' | 'database' | 'external';
  cacheHit?: boolean;
  rateLimitRemaining?: number;
  rateLimitReset?: number;
}

interface PaginationInfo {
  page: number;
  limit: number;
  total: number;
  pages: number;
  hasNext: boolean;
  hasPrev: boolean;
  nextPage?: number;
  prevPage?: number;
}
```

### Enhanced Error Codes
```typescript
type ErrorCode =
  // Validation errors
  | 'VALIDATION_ERROR'
  | 'INVALID_INPUT'
  | 'MISSING_REQUIRED_FIELD'
  | 'INVALID_FORMAT'
  | 'OUT_OF_RANGE'
  
  // Authentication & Authorization
  | 'UNAUTHORIZED'
  | 'FORBIDDEN'
  | 'TOKEN_EXPIRED'
  | 'TOKEN_INVALID'
  | 'ACCOUNT_LOCKED'
  | 'ACCOUNT_SUSPENDED'
  | 'TWO_FACTOR_REQUIRED'
  
  // Resource errors
  | 'NOT_FOUND'
  | 'RESOURCE_CONFLICT'
  | 'RESOURCE_LOCKED'
  | 'RESOURCE_EXPIRED'
  | 'RESOURCE_ARCHIVED'
  
  // File errors
  | 'FILE_TOO_LARGE'
  | 'INVALID_FILE_TYPE'
  | 'FILE_CORRUPTED'
  | 'VIRUS_DETECTED'
  | 'STORAGE_QUOTA_EXCEEDED'
  | 'UPLOAD_FAILED'
  | 'PROCESSING_FAILED'
  
  // Business logic errors
  | 'ENROLLMENT_FULL'
  | 'APPOINTMENT_CONFLICT'
  | 'QUERY_ALREADY_RESOLVED'
  | 'INSUFFICIENT_PERMISSIONS'
  | 'OPERATION_NOT_ALLOWED'
  | 'DEADLINE_PASSED'
  
  // System errors
  | 'SERVER_ERROR'
  | 'DATABASE_ERROR'
  | 'EXTERNAL_SERVICE_ERROR'
  | 'MAINTENANCE_MODE'
  | 'RATE_LIMIT_EXCEEDED'
  | 'SERVICE_UNAVAILABLE';
```

---

## üíæ Enhanced Database Requirements

### MongoDB Collections with Indexes (Enhanced)
```javascript
// Users Collection
db.users.createIndex({ email: 1 }, { unique: true });
db.users.createIndex({ role: 1 });
db.users.createIndex({ 'profile.department': 1 });
db.users.createIndex({ 'profile.year': 1 }); // For students
db.users.createIndex({ 'profile.major': 1 }); // For students
db.users.createIndex({ isActive: 1 });
db.users.createIndex({ lastLogin: -1 });
db.users.createIndex({ createdAt: -1 });

// Courses Collection
db.courses.createIndex({ lecturerId: 1 });
db.courses.createIndex({ 'enrollment.students': 1 });
db.courses.createIndex({ 'enrollment.waitlist': 1 });
db.courses.createIndex({ department: 1, semester: 1 });
db.courses.createIndex({ status: 1 });
db.courses.createIndex({ difficulty: 1 });
db.courses.createIndex({ rating: -1 });
db.courses.createIndex({ tags: 1 });
db.courses.createIndex({ prerequisites: 1 });
db.courses.createIndex({ code: 1 }, { unique: true });
db.courses.createIndex({ name: 'text', description: 'text', tags: 'text' }); // Text search

// Student Enrollments Collection
db.studentEnrollments.createIndex({ studentId: 1, courseId: 1 }, { unique: true });
db.studentEnrollments.createIndex({ courseId: 1, status: 1 });
db.studentEnrollments.createIndex({ studentId: 1, status: 1 });
db.studentEnrollments.createIndex({ currentGrade: 1 });
db.studentEnrollments.createIndex({ attendance: 1 });
db.studentEnrollments.createIndex({ riskLevel: 1 });
db.studentEnrollments.createIndex({ lastActivity: -1 });

// Course Reviews Collection
db.courseReviews.createIndex({ courseId: 1 });
db.courseReviews.createIndex({ studentId: 1, courseId: 1 }, { unique: true });
db.courseReviews.createIndex({ rating: -1 });
db.courseReviews.createIndex({ semester: 1 });
db.courseReviews.createIndex({ isVerified: 1 });

// Course Assignments Collection
db.courseAssignments.createIndex({ courseId: 1 });
db.courseAssignments.createIndex({ status: 1 });
db.courseAssignments.createIndex({ dueDate: 1 });
db.courseAssignments.createIndex({ category: 1 });

// Course Events Collection
db.courseEvents.createIndex({ courseId: 1, date: 1 });
db.courseEvents.createIndex({ type: 1, date: 1 });
db.courseEvents.createIndex({ isRequired: 1 });

// Course Messages Collection  
db.courseMessages.createIndex({ courseId: 1, timestamp: -1 });
db.courseMessages.createIndex({ 'sender.id': 1, courseId: 1 });
db.courseMessages.createIndex({ 'recipient.id': 1, courseId: 1 });
db.courseMessages.createIndex({ priority: 1, timestamp: -1 });
db.courseMessages.createIndex({ category: 1 });
db.courseMessages.createIndex({ isRead: 1 });
db.courseMessages.createIndex({ isBroadcast: 1 });
db.courseMessages.createIndex({ subject: 'text', content: 'text' }); // Text search

// Attendance Records Collection
db.attendanceRecords.createIndex({ studentId: 1, courseId: 1, date: -1 });
db.attendanceRecords.createIndex({ courseId: 1, date: -1 });
db.attendanceRecords.createIndex({ status: 1, date: -1 });
db.attendanceRecords.createIndex({ recordedBy: 1 });

// Queries Collection (Enhanced)
db.queries.createIndex({ lecturerId: 1, status: 1 });
db.queries.createIndex({ studentId: 1, status: 1 });
db.queries.createIndex({ category: 1, priority: 1 });
db.queries.createIndex({ course: 1 });
db.queries.createIndex({ submittedAt: -1 });
db.queries.createIndex({ lastUpdated: -1 });
db.queries.createIndex({ title: 'text', description: 'text' }); // Text search
db.queries.createIndex({ readByLecturer: 1, readByStudent: 1 });

// Resources Collection (Enhanced)
db.resources.createIndex({ course: 1, category: 1 });
db.resources.createIndex({ course: 1, weekNumber: 1 });
db.resources.createIndex({ course: 1, isRequired: 1 });
db.resources.createIndex({ lecturerId: 1 });
db.resources.createIndex({ 'uploader.userId': 1 });
db.resources.createIndex({ isPublic: 1, publishedAt: -1 });
db.resources.createIndex({ tags: 1 });
db.resources.createIndex({ uploadedAt: -1 });
db.resources.createIndex({ downloadCount: -1 });
db.resources.createIndex({ version: 1 });
db.resources.createIndex({ associatedAssignment: 1 });
db.resources.createIndex({ title: 'text', description: 'text', tags: 'text' }); // Text search
db.resources.createIndex({ fileType: 1 });
db.resources.createIndex({ isArchived: 1 });
db.resources.createIndex({ dueDate: 1 }); // For assignment resources

// Rest of indexes remain the same...
db.conversations.createIndex({ 'participants.student': 1 });
db.conversations.createIndex({ 'participants.lecturer': 1 });
db.conversations.createIndex({ status: 1 });
db.conversations.createIndex({ lastMessageAt: -1 });
db.conversations.createIndex({ course: 1 });
db.conversations.createIndex({ subject: 'text' }); // Text search

db.appointments.createIndex({ lecturerId: 1, date: 1 });
db.appointments.createIndex({ studentId: 1, status: 1 });
db.appointments.createIndex({ date: 1, time: 1 });
db.appointments.createIndex({ status: 1, date: 1 });
db.appointments.createIndex({ course: 1 });
db.appointments.createIndex({ type: 1 });

db.announcements.createIndex({ authorId: 1 });
db.announcements.createIndex({ type: 1, priority: 1 });
db.announcements.createIndex({ publishedAt: -1 });
db.announcements.createIndex({ 'targeting.courses': 1 });
db.announcements.createIndex({ 'targeting.departments': 1 });
db.announcements.createIndex({ isPinned: 1, publishedAt: -1 });
db.announcements.createIndex({ title: 'text', content: 'text' }); // Text search
db.announcements.createIndex({ expiresAt: 1 });

db.attachments.createIndex({ uploadedBy: 1 });
db.attachments.createIndex({ type: 1 });
db.attachments.createIndex({ uploadedAt: -1 });
db.attachments.createIndex({ isScanned: 1, scanResult: 1 });
db.attachments.createIndex({ size: 1 });

db.activityLogs.createIndex({ userId: 1, timestamp: -1 });
db.activityLogs.createIndex({ action: 1, timestamp: -1 });
db.activityLogs.createIndex({ resource: 1, resourceId: 1 });
db.activityLogs.createIndex({ timestamp: -1 });
db.activityLogs.createIndex({ sessionId: 1 });

db.systemSettings.createIndex({ key: 1 }, { unique: true });
db.systemSettings.createIndex({ category: 1 });
db.systemSettings.createIndex({ isEditable: 1 });
```

### Database Aggregation Pipelines
```javascript
// Query Analytics Pipeline
db.queries.aggregate([
  {
    $match: {
      lecturerId: ObjectId("..."),
      submittedAt: { $gte: ISODate("2025-01-01") }
    }
  },
  {
    $group: {
      _id: {
        category: "$category",
        status: "$status"
      },
      count: { $sum: 1 },
      avgResponseTime: { $avg: { $subtract: ["$lastUpdated", "$submittedAt"] } }
    }
  }
]);

// Resource Usage Analytics
db.resources.aggregate([
  {
    $match: { course: "CS101" }
  },
  {
    $lookup: {
      from: "attachments",
      localField: "_id",
      foreignField: "resourceId",
      as: "accessHistory"
    }
  },
  {
    $addFields: {
      totalAccesses: { $size: "$accessHistory" },
      uniqueUsers: { $size: { $setUnion: "$accessHistory.userId" } }
    }
  }
]);
```

---

## üõ†Ô∏è Enhanced Technical Stack

### Backend Framework & Dependencies
```xml
<!-- Spring Boot Starter Dependencies -->
<dependencies>
    <!-- Core Spring Boot -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <!-- Database -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-mongodb</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>
    
    <!-- Security -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-api</artifactId>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-impl</artifactId>
    </dependency>
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-jackson</artifactId>
    </dependency>
    
    <!-- Real-time Communication -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>
    
    <!-- File Processing -->
    <dependency>
        <groupId>org.apache.tika</groupId>
        <artifactId>tika-core</artifactId>
    </dependency>
    <dependency>
        <groupId>org.apache.tika</groupId>
        <artifactId>tika-parsers</artifactId>
    </dependency>
    <dependency>
        <groupId>net.coobird</groupId>
        <artifactId>thumbnailator</artifactId>
    </dependency>
    
    <!-- Cloud Storage -->
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>s3</artifactId>
    </dependency>
    <dependency>
        <groupId>io.minio</groupId>
        <artifactId>minio</artifactId>
    </dependency>
    
    <!-- Email -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-mail</artifactId>
    </dependency>
    
    <!-- Validation -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    
    <!-- API Documentation -->
    <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    </dependency>
    
    <!-- Monitoring & Metrics -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
        <groupId>io.micrometer</groupId>
        <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    
    <!-- Testing -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>mongodb</artifactId>
        <scope>test</scope>
    </dependency>
    
    <!-- Utilities -->
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct</artifactId>
    </dependency>
</dependencies>
```

### Enhanced Project Structure
```
src/main/java/com/edulink/
‚îú‚îÄ‚îÄ EduLinkApplication.java
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îú‚îÄ‚îÄ SecurityConfig.java
‚îÇ   ‚îú‚îÄ‚îÄ WebSocketConfig.java
‚îÇ   ‚îú‚îÄ‚îÄ MongoConfig.java
‚îÇ   ‚îú‚îÄ‚îÄ RedisConfig.java
‚îÇ   ‚îú‚îÄ‚îÄ FileStorageConfig.java
‚îÇ   ‚îú‚îÄ‚îÄ EmailConfig.java
‚îÇ   ‚îú‚îÄ‚îÄ CorsConfig.java
‚îÇ   ‚îî‚îÄ‚îÄ SwaggerConfig.java
‚îú‚îÄ‚îÄ controller/
‚îÇ   ‚îú‚îÄ‚îÄ AuthController.java
‚îÇ   ‚îú‚îÄ‚îÄ UserController.java
‚îÇ   ‚îú‚îÄ‚îÄ QueryController.java
‚îÇ   ‚îú‚îÄ‚îÄ ConversationController.java
‚îÇ   ‚îú‚îÄ‚îÄ ResourceController.java
‚îÇ   ‚îú‚îÄ‚îÄ AppointmentController.java
‚îÇ   ‚îú‚îÄ‚îÄ CourseController.java
‚îÇ   ‚îú‚îÄ‚îÄ AnnouncementController.java
‚îÇ   ‚îú‚îÄ‚îÄ FileController.java
‚îÇ   ‚îú‚îÄ‚îÄ DashboardController.java
‚îÇ   ‚îú‚îÄ‚îÄ SettingsController.java
‚îÇ   ‚îî‚îÄ‚îÄ AdminController.java
‚îú‚îÄ‚îÄ service/
‚îÇ   ‚îú‚îÄ‚îÄ impl/
‚îÇ   ‚îú‚îÄ‚îÄ AuthService.java
‚îÇ   ‚îú‚îÄ‚îÄ UserService.java
‚îÇ   ‚îú‚îÄ‚îÄ QueryService.java
‚îÇ   ‚îú‚îÄ‚îÄ ConversationService.java
‚îÇ   ‚îú‚îÄ‚îÄ ResourceService.java
‚îÇ   ‚îú‚îÄ‚îÄ FileService.java
‚îÇ   ‚îú‚îÄ‚îÄ NotificationService.java
‚îÇ   ‚îú‚îÄ‚îÄ EmailService.java
‚îÇ   ‚îú‚îÄ‚îÄ AnalyticsService.java
‚îÇ   ‚îú‚îÄ‚îÄ SettingsService.java
‚îÇ   ‚îî‚îÄ‚îÄ WebSocketService.java
‚îú‚îÄ‚îÄ repository/
‚îÇ   ‚îú‚îÄ‚îÄ UserRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ QueryRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ ConversationRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ ResourceRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ AppointmentRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ CourseRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ AnnouncementRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ AttachmentRepository.java
‚îÇ   ‚îú‚îÄ‚îÄ ActivityLogRepository.java
‚îÇ   ‚îî‚îÄ‚îÄ SystemSettingsRepository.java
‚îú‚îÄ‚îÄ model/
‚îÇ   ‚îú‚îÄ‚îÄ entity/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ User.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Query.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Conversation.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Resource.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Appointment.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Course.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Announcement.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Attachment.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ActivityLog.java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SystemSettings.java
‚îÇ   ‚îú‚îÄ‚îÄ embedded/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UserPreferences.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PrivacySettings.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SecuritySettings.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ NotificationSettings.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ QueryMessage.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StatusHistoryEntry.java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ DownloadRecord.java
‚îÇ   ‚îî‚îÄ‚îÄ enums/
‚îÇ       ‚îú‚îÄ‚îÄ UserRole.java
‚îÇ       ‚îú‚îÄ‚îÄ QueryStatus.java
‚îÇ       ‚îú‚îÄ‚îÄ QueryCategory.java
‚îÇ       ‚îú‚îÄ‚îÄ Priority.java
‚îÇ       ‚îú‚îÄ‚îÄ ResourceCategory.java
‚îÇ       ‚îú‚îÄ‚îÄ AppointmentStatus.java
‚îÇ       ‚îî‚îÄ‚îÄ FileType.java
‚îú‚îÄ‚îÄ dto/
‚îÇ   ‚îú‚îÄ‚îÄ request/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginRequest.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RegisterRequest.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ QueryRequest.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MessageRequest.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ResourceUploadRequest.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AppointmentRequest.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SettingsUpdateRequest.java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ FileUploadRequest.java
‚îÇ   ‚îú‚îÄ‚îÄ response/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginResponse.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UserResponse.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ QueryResponse.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ConversationResponse.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ResourceResponse.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AppointmentResponse.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DashboardStatsResponse.java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ApiResponse.java
‚îÇ   ‚îî‚îÄ‚îÄ mapper/
‚îÇ       ‚îú‚îÄ‚îÄ UserMapper.java
‚îÇ       ‚îú‚îÄ‚îÄ QueryMapper.java
‚îÇ       ‚îú‚îÄ‚îÄ ResourceMapper.java
‚îÇ       ‚îî‚îÄ‚îÄ AppointmentMapper.java
‚îú‚îÄ‚îÄ security/
‚îÇ   ‚îú‚îÄ‚îÄ JwtAuthenticationFilter.java
‚îÇ   ‚îú‚îÄ‚îÄ JwtTokenProvider.java
‚îÇ   ‚îú‚îÄ‚îÄ UserPrincipal.java
‚îÇ   ‚îú‚îÄ‚îÄ PermissionEvaluator.java
‚îÇ   ‚îú‚îÄ‚îÄ SecurityUtils.java
‚îÇ   ‚îî‚îÄ‚îÄ RateLimitFilter.java
‚îú‚îÄ‚îÄ websocket/
‚îÇ   ‚îú‚îÄ‚îÄ WebSocketHandler.java
‚îÇ   ‚îú‚îÄ‚îÄ WebSocketAuthenticator.java
‚îÇ   ‚îú‚îÄ‚îÄ MessageHandler.java
‚îÇ   ‚îú‚îÄ‚îÄ PresenceManager.java
‚îÇ   ‚îî‚îÄ‚îÄ ChannelManager.java
‚îú‚îÄ‚îÄ storage/
‚îÇ   ‚îú‚îÄ‚îÄ StorageService.java
‚îÇ   ‚îú‚îÄ‚îÄ S3StorageService.java
‚îÇ   ‚îú‚îÄ‚îÄ MinIOStorageService.java
‚îÇ   ‚îú‚îÄ‚îÄ LocalStorageService.java
‚îÇ   ‚îî‚îÄ‚îÄ FileProcessor.java
‚îú‚îÄ‚îÄ exception/
‚îÇ   ‚îú‚îÄ‚îÄ GlobalExceptionHandler.java
‚îÇ   ‚îú‚îÄ‚îÄ CustomExceptions.java
‚îÇ   ‚îú‚îÄ‚îÄ ValidationException.java
‚îÇ   ‚îú‚îÄ‚îÄ BusinessLogicException.java
‚îÇ   ‚îî‚îÄ‚îÄ FileProcessingException.java
‚îú‚îÄ‚îÄ util/
‚îÇ   ‚îú‚îÄ‚îÄ DateUtils.java
‚îÇ   ‚îú‚îÄ‚îÄ FileUtils.java
‚îÇ   ‚îú‚îÄ‚îÄ ValidationUtils.java
‚îÇ   ‚îú‚îÄ‚îÄ EncryptionUtils.java
‚îÇ   ‚îú‚îÄ‚îÄ ImageUtils.java
‚îÇ   ‚îî‚îÄ‚îÄ Constants.java
‚îú‚îÄ‚îÄ aspect/
‚îÇ   ‚îú‚îÄ‚îÄ LoggingAspect.java
‚îÇ   ‚îú‚îÄ‚îÄ SecurityAspect.java
‚îÇ   ‚îú‚îÄ‚îÄ PerformanceAspect.java
‚îÇ   ‚îî‚îÄ‚îÄ AuditAspect.java
‚îî‚îÄ‚îÄ scheduler/
    ‚îú‚îÄ‚îÄ NotificationScheduler.java
    ‚îú‚îÄ‚îÄ CleanupScheduler.java
    ‚îú‚îÄ‚îÄ ReportScheduler.java
    ‚îî‚îÄ‚îÄ MaintenanceScheduler.java

src/main/resources/
‚îú‚îÄ‚îÄ application.yml
‚îú‚îÄ‚îÄ application-dev.yml
‚îú‚îÄ‚îÄ application-prod.yml
‚îú‚îÄ‚îÄ logback-spring.xml
‚îú‚îÄ‚îÄ email-templates/
‚îú‚îÄ‚îÄ static/
‚îî‚îÄ‚îÄ db/migration/
```

### Configuration Files
```yaml
# application.yml
server:
  port: 8080
  servlet:
    context-path: /api

spring:
  application:
    name: edulink-pro
  
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017/edulink}
      auto-index-creation: true
    
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      jedis:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  servlet:
    multipart:
      enabled: true
      max-file-size: 500MB
      max-request-size: 2GB
      resolve-lazily: true
  
  mail:
    host: ${SMTP_HOST}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  
  security:
    jwt:
      secret: ${JWT_SECRET}
      expiration: 86400000 # 24 hours
      refresh-expiration: 604800000 # 7 days

# File Storage Configuration
storage:
  type: ${STORAGE_TYPE:s3} # s3, minio, local
  s3:
    bucket: ${AWS_S3_BUCKET}
    region: ${AWS_REGION:us-east-1}
    access-key: ${AWS_ACCESS_KEY}
    secret-key: ${AWS_SECRET_KEY}
  minio:
    endpoint: ${MINIO_ENDPOINT}
    access-key: ${MINIO_ACCESS_KEY}
    secret-key: ${MINIO_SECRET_KEY}
    bucket: ${MINIO_BUCKET}
  local:
    upload-dir: ${LOCAL_UPLOAD_DIR:./uploads}

# WebSocket Configuration
websocket:
  allowed-origins: ${WS_ALLOWED_ORIGINS:http://localhost:3000}
  heartbeat-interval: 30000
  max-sessions-per-user: 5

# Rate Limiting
rate-limit:
  enabled: true
  general:
    requests: 100
    window: 900 # 15 minutes
  auth:
    requests: 5
    window: 900
  upload:
    requests: 10
    window: 60

# Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
```

---

## üöÄ Performance & Optimization

### Caching Strategy
```typescript
interface CacheConfig {
  redis: {
    defaultTTL: 3600; // 1 hour
    maxMemory: "2gb";
    evictionPolicy: "allkeys-lru";
  };
  
  applicationCache: {
    userSessions: { ttl: 1800, maxSize: 10000 };
    queryResults: { ttl: 300, maxSize: 5000 };
    resourceMetadata: { ttl: 3600, maxSize: 50000 };
    courseData: { ttl: 7200, maxSize: 1000 };
    announcements: { ttl: 1800, maxSize: 2000 };
  };
  
  databaseQueryCache: {
    enabled: true;
    defaultTTL: 600;
    maxQueries: 1000;
  };
}
```

### Database Optimization
```javascript
// Compound indexes for complex queries
db.queries.createIndex(
  { "lecturerId": 1, "status": 1, "submittedAt": -1 }
);

db.resources.createIndex(
  { "course": 1, "category": 1, "isPublic": 1, "publishedAt": -1 }
);

// Partial indexes for performance
db.queries.createIndex(
  { "autoCloseAt": 1 },
  { partialFilterExpression: { "autoCloseAt": { $exists: true } } }
);

// TTL index for automatic cleanup
db.activityLogs.createIndex(
  { "timestamp": 1 },
  { expireAfterSeconds: 2592000 } // 30 days
);
```

---

## üÜï Additional Features Discovered in Frontend Analysis

### 1. **Course Rating & Review System**
- Students can rate and review courses after completion
- Aggregate ratings visible in course directory
- Verified reviews from enrolled students
- Semester-based review tracking

### 2. **Advanced Course Discovery**
```typescript
interface CourseDiscovery {
  prerequisites: string[]; // Automatic prerequisite checking
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  tags: string[]; // Searchable course tags
  rating: number; // Average student rating
  reviews: CourseReview[]; // Student feedback
  waitlist: boolean; // Waitlist management
}
```

### 3. **Student Performance Analytics**
```typescript
interface StudentAnalytics {
  attendanceTracking: boolean;
  participationScoring: boolean;
  assignmentCompletion: number;
  riskAssessment: 'low' | 'medium' | 'high';
  improvementTrends: 'improving' | 'stable' | 'declining';
  specialAccommodations: string[];
}
```

### 4. **Enhanced Resource Management**
- Week-based resource organization
- Version control system for files
- Advanced permission matrix
- Download tracking and analytics
- Bulk operations for lecturers
- Associated assignment linking

### 5. **Course Communication System**
```typescript
interface CourseMessaging {
  broadcastCapability: boolean; // Message entire class
  priorityLevels: 'normal' | 'high' | 'urgent';
  categoryClassification: 'general' | 'assignment' | 'exam' | 'lab' | 'project';
  attachmentSupport: boolean;
  readStatusTracking: boolean;
}
```

### 6. **Advanced Search & Filtering**
- Multi-criteria filtering across all entities
- Real-time search suggestions
- Tag-based categorization
- Sort by multiple parameters
- Saved search preferences

### 7. **Lecturer Tools**
```typescript
interface LecturerFeatures {
  studentRoster: boolean; // View enrolled students with performance
  gradeManagement: boolean;
  attendanceRecording: boolean;
  studentNotes: boolean; // Private notes about students  
  bulkOperations: boolean; // Mass messaging, grading
  classAnalytics: boolean; // Performance insights
  resourceVersioning: boolean;
}
```

### 8. **File Type Extensions**
- Support for 25+ file types
- Code file uploads (.java, .py, .js, etc.)
- Enhanced media support
- Archive file handling
- Automatic file processing and thumbnails

### 9. **User Experience Enhancements**
```typescript
interface UXFeatures {
  viewModeToggle: 'grid' | 'list'; // All major pages
  quickStats: boolean; // Dashboard-style metrics
  breadcrumbNavigation: boolean;
  modalInteractions: boolean;
  responsiveDesign: boolean;
  progressIndicators: boolean;
}
```

### 10. **Security & Compliance**
```typescript
interface EnhancedSecurity {
  resourcePermissions: {
    canView: boolean;
    canDownload: boolean;
    requiresAuth: boolean;
  };
  dataRetention: {
    activeCourseDays: number;
    completedCourseDays: number;
    userDataDays: number;
  };
  auditTrail: boolean;
  accessControl: 'role-based' | 'permission-based';
}
```

This comprehensive backend specification covers all the requirements extracted from your frontend pages, including the 4 additional pages you provided. The specification includes enhanced data models, comprehensive API endpoints, robust security measures, real-time features, file handling capabilities, and all the necessary backend infrastructure to support your EduLink Pro application.

The key additions from analyzing your 4 pages include:
- Enhanced query management with real-time messaging
- Comprehensive resource management with file processing
- Detailed settings management with user preferences
- Advanced search and filtering capabilities
- Real-time notifications and WebSocket integration
- Robust file upload and processing pipeline
- Enhanced security and permission systems

Focus on implementing the core functionality first: authentication, user management, queries, conversations, resources, and basic file handling, then gradually add the advanced features like real-time messaging, analytics, and sophisticated file processing.